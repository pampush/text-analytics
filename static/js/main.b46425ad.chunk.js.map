{"version":3,"sources":["components/Notification.tsx","components/ResultCard.tsx","components/ResultSkeleton.tsx","components/ResultBox.tsx","components/searchBox/ErrorsBox.tsx","components/searchBox/SearchButton.tsx","components/searchBox/SearchField.tsx","redux/texts/types.ts","redux/texts/actionCreators.ts","services/translateAPI.ts","services/countVowels.ts","services/countWords.ts","components/SearchBox.tsx","pages/SearchPage.tsx","App.tsx","redux/texts/reducer.ts","redux/index.ts","redux/store.ts","index.tsx"],"names":["fadeIn","keyframes","fadeOut","_Notification","styled","div","props","animation","css","Notification","open","message","onClose","autoHideDuration","React","useState","setAnimation","useEffect","timer","setTimeout","clearTimeout","onAnimationEnd","ResultCard","data","className","height","width","text","words","vowels","ResultSkeleton","ResultBox","useSelector","state","texts","loading","items","Array","fill","map","item","i","Object","entries","id","_ErrorBox","ErrorsBox","errors","join","_SearchButton","button","SearchButton","onClick","value","size","_SearchField","input","SearchField","Types","placeholder","name","onChange","inputSize","e","target","setLoading","type","SET_LOADING","payload","setMetaActionCreator","SET_META","fetchText","dispatch","a","axios","get","headers","result","ADD_TEXT","Promise","resolve","console","error","Error","detectLanguage","post","method","detections","language","countVowels","lang","length","dictionary","includes","countWords","split","SearchBox","useDispatch","setValue","setErrors","log","handleClick","validate","correct","uniqueTextIds","from","Set","RESET_TEXTS","textObject","toLowerCase","SET_ERROR","str","reduce","accum","next","trim","search","toBeNumber","Number","isNaN","incorrect","SearchPage","openNotification","setOpenNotification","App","initialState","reducer","action","newText","rootReducer","combineReducers","textsReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b46425ad.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled, { keyframes, css } from 'styled-components';\r\n\r\ninterface _NotificationProps {\r\n  animation: boolean;\r\n}\r\n\r\nconst fadeIn = keyframes`\r\nfrom {\r\n  opacity: 0;\r\n  transform: translateX(-50%) scale(0);\r\n}\r\nto {\r\n  opacity: 1;\r\n  transform: translateX(-50%) scale(1);\r\n}\r\n`;\r\n\r\nconst fadeOut = keyframes`\r\nfrom {\r\n  opacity: 1;\r\n  transform: translateX(-50%) scale(1);\r\n}\r\nto {\r\n  opacity: 0;\r\n  transform: translateX(-50%) scale(0);\r\n}`;\r\n\r\nconst _Notification = styled.div<_NotificationProps>`\r\n  display: flex;\r\n  font-size: 2rem;\r\n  padding: 1rem;\r\n  background-color: red;\r\n  position: fixed;\r\n  left: 50%;\r\n  bottom: 1rem;\r\n  transform: translateX(-50%);\r\n  transform-origin: center\r\n  background-color: #f97c7c;\r\n  border-radius: 1.5rem;\r\n  box-shadow: 0 0 1rem -0.3rem #000000;\r\n  animation: ${(props) =>\r\n    props.animation\r\n      ? css`\r\n          ${fadeIn}\r\n        `\r\n      : css`\r\n          ${fadeOut}\r\n        `}\r\n    linear .2s;\r\n`;\r\n\r\ninterface NotificationProps {\r\n  open: boolean;\r\n  message: string;\r\n  onClose: () => void;\r\n  autoHideDuration: number;\r\n}\r\n\r\nfunction Notification({ open, message, onClose, autoHideDuration }: NotificationProps) {\r\n  const [animation, setAnimation] = React.useState(true);\r\n\r\n  /**\r\n   * if authohideDuration is set\r\n   */\r\n  React.useEffect(() => {\r\n    if (!autoHideDuration) return;\r\n    if (!open) return;\r\n    const timer = setTimeout(() => setAnimation(false), autoHideDuration);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [open]);\r\n\r\n  /**\r\n   * if autohideDuration is missing\r\n   */\r\n  function handleAnimationEnd() {\r\n    if (animation) return;\r\n    onClose();\r\n    setAnimation(true);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {open && (\r\n        <_Notification animation={animation} onAnimationEnd={handleAnimationEnd}>\r\n          {message}\r\n        </_Notification>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Notification;\r\n","import React from 'react';\r\n\r\nimport { Text } from '../redux/texts/types';\r\n\r\nfunction ResultCard(data: Text) {\r\n  return (\r\n    <div className=\"card\">\r\n      <img height=\"20rem\" width=\"20rem\" className=\"card__img\"></img>\r\n      <div className=\"card__title\">{data.text}</div>\r\n      <div className=\"card-info card__words\">\r\n        <div>Слов</div>\r\n        <div>{data.words}</div>\r\n      </div>\r\n      <div className=\"card-info card__vowels\">\r\n        <div>Гласных</div>\r\n        <div>{data.vowels}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ResultCard;\r\n","import React from 'react';\r\n\r\nfunction ResultSkeleton() {\r\n  return <div className=\"card-skeleton\"></div>;\r\n}\r\n\r\nexport default ResultSkeleton;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport ResultCard from './ResultCard';\r\nimport { AppState } from '../redux/';\r\nimport ResultSkeleton from './ResultSkeleton';\r\n\r\nfunction ResultBox() {\r\n  const { loading, items } = useSelector((state: AppState) => state.texts);\r\n\r\n  return (\r\n    <>\r\n      {loading\r\n        ? Array(3)\r\n            .fill(0)\r\n            .map((item, i) => <ResultSkeleton key={i} />)\r\n        : Object.entries(items).map(([id, data]) => <ResultCard key={id} {...data} />)}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ResultBox;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface ErrorsBoxProps {\r\n  errors: string[];\r\n  message: string;\r\n}\r\n\r\nconst _ErrorBox = styled.div`\r\n  color: #e7320d;\r\n  font-size: inherit;\r\n`;\r\n\r\n/**\r\n * Component displays errors if validation is not passed\r\n * @param params - message - error message, errors - wrong input characters  \r\n * @returns JSX.Element\r\n */\r\nfunction ErrorsBox({ message, errors }: ErrorsBoxProps) {\r\n  return (\r\n    <_ErrorBox>\r\n      <span>{message + ' '}</span>\r\n      <span>{errors.join(', ')}</span>\r\n    </_ErrorBox>\r\n  );\r\n}\r\n\r\nexport default ErrorsBox;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Size } from '../types';\r\n\r\ninterface _SearchButtonProps {\r\n  size: keyof Size;\r\n}\r\n\r\nconst _SearchButton = styled.button<_SearchButtonProps>`\r\n  background: #f2f4f8;\r\n  width: 100%;\r\n  height: 100%;\r\n  font-size: inherit;\r\n  padding: 1.1rem;\r\n  color: #5964cc;\r\n  border-radius: 1.5rem;\r\n  cursor: pointer;\r\n  border-style: none;\r\n  &:hover {\r\n    background-color: #c3c3c3;\r\n  }\r\n  &:active {\r\n    transform: translateY(0.1rem);\r\n  }\r\n`;\r\n\r\ninterface SearchButtonProps {\r\n  onClick: () => void;\r\n  value: string;\r\n  size: keyof Size;\r\n}\r\n\r\nfunction SearchButton({ onClick, value, size }: SearchButtonProps) {\r\n  return (\r\n    <_SearchButton size={size} onClick={onClick}>\r\n      {value}\r\n    </_SearchButton>\r\n  );\r\n}\r\n\r\nexport default SearchButton;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Size } from '../types';\r\n\r\ninterface _SearchFieldProps {\r\n  inputSize: keyof Size;\r\n}\r\n\r\nconst _SearchField = styled.input<_SearchFieldProps>`\r\n  padding: 1rem;\r\n  font-size: inherit;\r\n  border-style: none;\r\n  border-radius: 1.5rem;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: #f2f4f8;\r\n`;\r\n\r\ninterface SearchField {\r\n  size: keyof Size;\r\n  value: string;\r\n  placeholder: string;\r\n  name: string;\r\n  onChange: (text: string) => void;\r\n}\r\n\r\nfunction SearchField({ size, placeholder, name, onChange }: SearchField) {\r\n  return (\r\n    <>\r\n      <_SearchField\r\n        inputSize={size}\r\n        placeholder={placeholder}\r\n        name={name}\r\n        onChange={(e) => onChange(e.target.value)}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SearchField;\r\n","export interface Text {\r\n  lang?: string;\r\n  text: string;\r\n  vowels?: number;\r\n  words?: number;\r\n}\r\n\r\nexport interface TextsState {\r\n  readonly items: Record<number, Text>;\r\n  readonly loading: boolean;\r\n  readonly errors: string;\r\n}\r\n\r\nexport enum Types {\r\n  ADD_TEXT = '@@texts/ADD_TEXT',\r\n  SET_LOADING = '@@texts/SET_LOADING',\r\n  RESET_TEXTS = '@@texts/RESET_TEXTS',\r\n  SET_META = '@@texts/SET_META',\r\n  SET_ERROR = '@@texts/SET_ERROR',\r\n}\r\n","import axios, { AxiosResponse } from 'axios';\r\nimport { ActionCreator, Action } from 'redux';\r\nimport { ThunkAction, ThunkDispatch } from 'redux-thunk';\r\n\r\nimport {\r\n  addTextAction,\r\n  resetTextsAction,\r\n  setErrorAction,\r\n  setLoadingAction,\r\n  setMetaAction,\r\n} from './actions';\r\nimport { Text, Types } from './types';\r\nimport { AppState } from '../';\r\n\r\nconst BASE_URL = 'https://tmgwebtest.azurewebsites.net/api/textstrings/';\r\n\r\n/**\r\n * Add next texts to texts.items object\r\n * @param payload - text + metainformation\r\n * @returns Action\r\n */\r\nconst addTextActionCreator: ActionCreator<addTextAction> = (payload: {\r\n  id: number;\r\n  text: Text;\r\n}) => ({\r\n  type: Types.ADD_TEXT,\r\n  payload,\r\n});\r\n\r\n/**\r\n * set loading state for user experience features\r\n * @param loading - true/false\r\n * @returns\r\n */\r\nconst setLoading: ActionCreator<setLoadingAction> = (loading: boolean) => ({\r\n  type: Types.SET_LOADING,\r\n  payload: loading,\r\n});\r\n\r\n/**\r\n * reset redux store.texts state to initial value\r\n * @returns\r\n */\r\nconst resetTexts: ActionCreator<resetTextsAction> = () => ({\r\n  type: Types.RESET_TEXTS,\r\n});\r\n\r\nconst setErrorActionCreator: ActionCreator<setErrorAction> = (error: string) => ({\r\n  type: Types.SET_ERROR,\r\n  payload: error,\r\n});\r\n\r\n/**\r\n * Set all metainfo (id, vowels, words, lang) about text at once\r\n * @param param0 id, vowels, words, lang\r\n * @returns\r\n */\r\nconst setMetaActionCreator: ActionCreator<setMetaAction> = ({\r\n  ...payload\r\n}: {\r\n  id: number;\r\n  vowels: number;\r\n  words: number;\r\n  lang: string;\r\n}) => ({\r\n  type: Types.SET_META,\r\n  payload: { ...payload },\r\n});\r\n\r\n/**\r\n *  Fetch only one text from API by id\r\n * @param id - text identifier at the server\r\n * @returns\r\n */\r\nconst fetchText =\r\n  (id: number): ThunkAction<Promise<Text>, AppState, void, Action> =>\r\n  async (dispatch: ThunkDispatch<AppState, void, Action>) => {\r\n    try {\r\n      const { data: result } = await axios.get<Text, AxiosResponse<Text>>(`${BASE_URL}${id}`, {\r\n        headers: {\r\n          'TMG-Api-Key': '0J/RgNC40LLQtdGC0LjQutC4IQ==',\r\n        },\r\n      });\r\n\r\n      dispatch(addTextActionCreator({ id, text: result }));\r\n      return Promise.resolve(result); // dispatch returns promise\r\n    } catch (e) {\r\n      console.error(e.message);\r\n      throw new Error(e);\r\n    }\r\n  };\r\n\r\nexport { addTextActionCreator, fetchText, setLoading, resetTexts, setMetaActionCreator, setErrorActionCreator };\r\n","import axios, { AxiosResponse } from 'axios';\r\n\r\nimport { Languages } from '../types';\r\n\r\ninterface ResponseData {\r\n  data: { detections: Array<Array<{ language: string }>> };\r\n}\r\n\r\nconst detectLanguage = async (text: string): Promise<Languages> => {\r\n  try {\r\n    const { data: result } = await axios.post<ResponseData, AxiosResponse<ResponseData>>(\r\n      `https://translation.googleapis.com/language/translate/v2/detect?q=${text}&key=AIzaSyDnEjxJ2_Lk0SiuGWpW9f13xygv82rOnyk`,\r\n      {\r\n        method: 'POST',\r\n      },\r\n    );\r\n\r\n    return Promise.resolve(result.data.detections[0][0].language) as Promise<Languages>;\r\n  } catch (e) {\r\n    console.error(e.message);\r\n    throw new Error(e);\r\n  }\r\n};\r\n\r\nexport { detectLanguage };\r\n","import { default as dictionary } from '../resources/languagesMap.json';\r\n\r\nimport { Languages } from '../types';\r\n\r\nexport function countVowels(text: string, lang: Languages) {\r\n  let vowels = 0;\r\n\r\n  try {\r\n    for (let i = 0; i < text.length; i++) {\r\n      if (dictionary[lang]?.includes(text[i])) vowels++;\r\n    }\r\n    return vowels;\r\n  } catch (e) {\r\n    console.error(e.message);\r\n    return 0;\r\n  }\r\n}\r\n","/**\r\n * Let's just use the simpliest way to count words using spaces as separators.\r\n * Let me explain a bit more, we could use RegEx to count words, but this would required\r\n * list letters in all languages.\r\n */\r\nexport function countWords(text: string) {\r\n  return text.split(' ').length;\r\n}\r\n","import React from 'react';\r\nimport ErrorsBox from './searchBox/ErrorsBox';\r\nimport { useDispatch } from 'react-redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { Action } from 'redux';\r\n\r\nimport SearchButton from './searchBox/SearchButton';\r\nimport SearchField from './searchBox/SearchField';\r\nimport {\r\n  fetchText,\r\n  resetTexts,\r\n  setMetaActionCreator,\r\n  setLoading,\r\n  setErrorActionCreator,\r\n} from '../redux/texts/actionCreators';\r\nimport { AppState } from '../redux';\r\nimport { detectLanguage } from '../services/translateAPI';\r\nimport { countVowels } from '../services/countVowels';\r\nimport { Languages } from '../types';\r\nimport { countWords } from '../services/countWords';\r\n\r\nfunction SearchBox() {\r\n  const dispatch: ThunkDispatch<AppState, void, Action> = useDispatch();\r\n  const [value, setValue] = React.useState<string>('');\r\n  const [errors, setErrors] = React.useState<string[]>([]);\r\n\r\n  /**\r\n   *  Control input by value state of SearchBox\r\n   *  Validate string on each input change to detect errors\r\n   * @param text\r\n   */\r\n  const handleChange = (text: string) => {\r\n    const { incorrect } = validate(text);\r\n\r\n    if (incorrect.length) setErrors(incorrect);\r\n    else setErrors([]);\r\n\r\n    setValue(text);\r\n  };\r\n  console.log('render');\r\n\r\n  /**\r\n   * @description 1. Validate and return correct tokens\r\n   *  2. Filter duplicates\r\n   *  3. Reset previous redux texts state\r\n   *  4. Tell user that fetching has started\r\n   *  5. In loop iterate over ids and determine metainfo for each text. If request (fetchText or detectLanguage)\r\n   * was rejected, we skip current iteration and start next\r\n   *  6. Changing loading state to false indicates that fetching is over\r\n   */\r\n  const handleClick = async () => {\r\n    const { correct } = validate(value);\r\n    const uniqueTextIds = Array.from(new Set(correct));\r\n\r\n    dispatch(resetTexts());\r\n    dispatch(setLoading(true));\r\n\r\n    for (const id of uniqueTextIds) {\r\n      try {\r\n        const textObject = await dispatch(fetchText(id));\r\n        const text = textObject.text.toLowerCase();\r\n        const lang: Languages = await detectLanguage(text);\r\n        const vowels = countVowels(text, lang);\r\n        const words = countWords(text);\r\n        dispatch(setMetaActionCreator({ id, lang, vowels, words }));\r\n      } catch (e) {\r\n        dispatch(setErrorActionCreator(`Ошибка запроса: ${e.message}`));\r\n        console.error(e.message);\r\n      }\r\n    }\r\n\r\n    dispatch(setLoading(false));\r\n  };\r\n\r\n  /**\r\n   * Define whether the unacceptable substrings are in input string\r\n   * @param str input string\r\n   * @returns correct - correct tokens, uncorrect - forbidden tokens\r\n   */\r\n  const validate = (\r\n    str: string,\r\n  ): {\r\n    correct: number[];\r\n    incorrect: string[];\r\n  } => {\r\n    const textIndexes = str.split(/[,;]+/);\r\n\r\n    const result = textIndexes.reduce<{\r\n      correct: number[];\r\n      incorrect: string[];\r\n    }>(\r\n      (accum, next) => {\r\n        if (!next.trim()) return accum;\r\n        if (next.trim().search(/^0*([1-9]|1[0-9]|20)$/) !== -1) {\r\n          const toBeNumber = Number(next.trim());\r\n          if (!Number.isNaN(toBeNumber))\r\n            return { ...accum, correct: [...accum.correct, toBeNumber] };\r\n          else {\r\n            return { ...accum, incorrect: [...accum.incorrect, next.trim()] };\r\n          }\r\n        } else {\r\n          return { ...accum, incorrect: [...accum.incorrect, next.trim()] };\r\n        }\r\n      },\r\n      { correct: [], incorrect: [] },\r\n    );\r\n\r\n    return result;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"search-input__container\">\r\n        <div className=\"search-input__field\">\r\n          <SearchField\r\n            name=\"search-input\"\r\n            placeholder=\"Введите номера текстов\"\r\n            size=\"small\"\r\n            value={value}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        {errors.length ? (\r\n          <div className=\"search-errors\">\r\n            <ErrorsBox message=\"Некорректные значения:\" errors={errors} />\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n      <div className=\"search-button\">\r\n        <SearchButton onClick={handleClick} size=\"small\" value=\"Подсчитать\" />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { AppState } from '../redux';\r\nimport Notification from '../components/Notification';\r\nimport ResultBox from '../components/ResultBox';\r\nimport SearchBox from '../components/SearchBox';\r\n\r\nfunction SearchPage() {\r\n  const [openNotification, setOpenNotification] = React.useState<boolean>(false);\r\n  const errors = useSelector((state: AppState) => state.texts.errors);\r\n\r\n  React.useEffect(() => {\r\n    if (errors.length) setOpenNotification(true);\r\n  }, [errors]);\r\n\r\n  console.log('page', openNotification);\r\n\r\n  return (\r\n    <>\r\n      <section className=\"search\">\r\n        <SearchBox />\r\n      </section>\r\n      <section className=\"cards\">\r\n        <ResultBox />\r\n      </section>\r\n      <Notification\r\n        open={openNotification}\r\n        message={errors}\r\n        autoHideDuration={5000}\r\n        onClose={() => setOpenNotification(false)}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SearchPage;\r\n","import React from 'react';\n\nimport SearchPage from './pages/SearchPage';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <SearchPage />\n    </div>\n  );\n}\n\nexport default App;\n","import { Reducer } from 'redux';\r\n\r\nimport { TextsState, Types } from './types';\r\nimport { textsActions } from './actions';\r\n\r\nconst initialState: TextsState = {\r\n  items: {},\r\n  errors: '',\r\n  loading: false,\r\n};\r\n\r\nconst reducer: Reducer<TextsState, textsActions> = (state = initialState, action): TextsState => {\r\n  switch (action.type) {\r\n    case Types.ADD_TEXT:\r\n      return {\r\n        ...state,\r\n        items: { ...state.items, [action.payload.id]: action.payload.text },\r\n      };\r\n\r\n    case Types.RESET_TEXTS:\r\n      return initialState;\r\n\r\n    case Types.SET_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: action.payload,\r\n      };\r\n\r\n    case Types.SET_META:\r\n      const newText = action.payload;\r\n      return {\r\n        ...state,\r\n        items: {\r\n          ...state.items,\r\n          [newText.id]: {\r\n            ...state.items[newText.id],\r\n            vowels: newText.vowels,\r\n            words: newText.words,\r\n            lang: newText.lang,\r\n          },\r\n        },\r\n      };\r\n\r\n    case Types.SET_ERROR:\r\n      return {\r\n        ...state,\r\n        errors: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport textsReducer from './texts/reducer';\r\nimport { TextsState } from './texts/types';\r\n\r\nexport interface AppState {\r\n  texts: TextsState;\r\n}\r\n\r\nconst rootReducer = combineReducers<AppState>({\r\n  texts: textsReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, compose, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport rootReducer from './';\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\n\nimport store from './redux/store';\n\nimport 'normalize.css';\nimport './sass/main.sass';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}